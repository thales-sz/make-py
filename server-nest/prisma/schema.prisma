generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id          String @id @default(uuid())
  firstName   String @map("first_name")
  lastName    String @map("last_name")
  email       String @unique
  role        Role   @default(USER)
  password    String
  sale        Sale[]
  phoneNumber String @map("phone_number")

  @@map("users")
}

enum Role {
  ADMIN
  USER
}

model Product {
  id            String        @id @default(uuid())
  price         Float
  name          String        @unique
  description   String
  stockQuantity Stock?
  createdAt     DateTime      @default(now())
  saleProduct   SaleProduct[]

  @@map("products")
}

model Sale {
  id              String           @id @default(uuid())
  user            User?            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          String           @map("user_id")
  deliveryAddress DeliveryAddress?
  totalPrice      Float            @map("total_price")
  saleDate        DateTime         @default(now()) @map("sale_date")
  status          Boolean          @default(false)
  saleProduct     SaleProduct[]

  @@index([userId])
  @@map("sales")
}

model SaleProduct {
  sale      Sale?    @relation(fields: [saleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  saleId    String   @map("sale_id")
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String   @map("product_id")
  quantity  Int

  @@id([saleId, productId])
  @@index([saleId])
  @@index([productId])
  @@map("sales_products")
}

model DeliveryAddress {
  sale    Sale   @relation(fields: [saleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  saleId  String @unique @map("sale_id")
  address String
  cep     Int

  @@index([saleId])
  @@map("delivery_address")
}

model Stock {
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String   @unique @map("product_id")
  quantity  Int

  @@map("stocks")
}
